/* 
 * Keyword Extraction
 *
 * The Keyword Extraction API allows you to extract keywords from text. Keywords can be extracted from text, file or stream location. With each extracted keyword a weight will be given.    The flow is generally as follows:  1. Create an extraction job. If no settings are provided, default settings are used.  2. Upload content for extraction.  3. Start the extraction job.  3. Get the result when the extraction is completed.    Full API Documentation: https://docs.sphereon.com/api/extraction/keyword/0.0/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Sphereon.SDK.Extraction.Keyword.Client;
using Sphereon.SDK.Extraction.Keyword.Api;
using Sphereon.SDK.Extraction.Keyword.Model;
using System.Threading;

namespace Sphereon.SDK.Extraction.Keyword.Test
{
    /// <summary>
    ///  Class for testing KeywordExtractionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class KeywordExtractionApiTests
    {
        private KeywordExtractionApi instance;
        private static string jobid;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new KeywordExtractionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of KeywordExtractionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NamedEntityExtractionApi
            //Assert.IsInstanceOfType(typeof(NamedEntityExtractionApi), instance, "instance is a NamedEntityExtractionApi");
        }

        /// <summary>
        /// Test CreateJob
        /// </summary>
        [Test, Order(10)]
        public void CreateJobTest()
        {
            JobSettings jobSettings = new JobSettings(JobSettings.TfidfSchemeEnum.TFIDF, JobSettings.EngineEnum.BASIC, JobSettings.NormalizationEnum.COSINE, 0, 10);

            var response = instance.CreateJob(jobSettings);

            Assert.IsInstanceOf<Job>(response, "response is Job");
            Assert.NotNull(response);
            Assert.AreEqual(Job.StateEnum.INPUTSUPLOADED, response.State);

            jobid = response.JobId;
        }

        /// <summary>
        /// Test AddInputText
        /// </summary>
        [Test, Order(20)]
        public void AddInputTextTest()
        {
            string text = text = "Gratis af te halen in Assen: een monumentaal kunstwerk. Er is één maar: het kunstwerk is 15 meter hoog.\n" +
                                  "Het gaat om een kunstwerk dat vanaf 1989 voor het station in Assen stond en door de Haarlemse kunstenaar Jan Jacobs Mulder is gemaakt. Het werk heet Aarde, Water, Huis en bestaat uit drie delen: een stalen sokkel met daarboven twee stalen frames.\n" +
                                  "Het kunstwerk is van de gemeente. Die verwijderde het in 2013 omdat het stationsgebied wordt heringericht, schrijft RTV Drenthe. De werkgroep Monumentale Kunst van erfgoedvereniging Heemschut kwam erachter dat het sindsdien - zo omschrijft Norman Vervat van de werkgroep - \"op een werf lag weg te roesten.\"\n" +
                                  "Plein, rotonde of verzamelaar\n" +
                                  "Assen gaat het niet terugplaatsen en vroeg de werkgroep te helpen bij het zoeken naar een ander \"tehuis\". Vervat: \"We denken aan een plein, park of rotonde. Of aan een verzamelaar met een grote tuin.\"\n" +
                                  "Hij heeft al enkele mailtjes van belangstellenden binnen. De nieuwe eigenaar moet wel over geld beschikken: het werk moet worden opgeknapt en moet bij herplaatsing een fundering krijgen (kosten: 15.000 euro). Het tienjaarlijkse onderhoud kost ook enkele duizenden euro's.";
            TextInput textInput = new TextInput(text);

            var response = instance.AddInputText(jobid, textInput);

            Assert.IsInstanceOf<Job>(response, "response is Job");
            Assert.NotNull(response);
            Assert.AreEqual(Job.StateEnum.INPUTSUPLOADED, response.State);
            Assert.AreEqual(1, response.Inputs.Count);
        }

        /// <summary>
        /// Test SubmitJob
        /// </summary>
        [Test, Order(30)]
        public void SubmitJobTest()
        {
            JobSettings jobSettings = new JobSettings(JobSettings.TfidfSchemeEnum.TFIDF, JobSettings.EngineEnum.BASIC, JobSettings.NormalizationEnum.COSINE, 0, 10);

            var response = instance.SubmitJob(jobid, jobSettings);

            Assert.IsInstanceOf<Job>(response, "response is Job");
            Assert.NotNull(response);
            Assert.AreEqual(Job.StateEnum.PROCESSING, response.State);
        }

        /// <summary>
        /// Test GetJob
        /// </summary>
        [Test, Order(40)]
        public void GetJobTest()
        {
            var count = 0;
            Job.StateEnum state = Job.StateEnum.PROCESSING;

            // poll the state of the job until it's complete
            while (state == Job.StateEnum.PROCESSING || count < 20)
            {
                count++;
                Thread.Sleep(1000);

                var response = instance.GetJob(jobid);
                Assert.IsInstanceOf<Job>(response, "response is Job");
                Assert.NotNull(response);

                state = response.State.Value;
            }
        }

        /// <summary>
        /// Test GetResult
        /// </summary>
        [Test, Order(50)]
        public void GetResultTest()
        {
            var response = instance.GetResult(jobid);

            Assert.IsInstanceOf<KeywordExtractionResponse>(response, "response is KeywordExtractionResponse");
            Assert.NotNull(response);
            Assert.AreEqual(Job.StateEnum.DONE, response.Job.State);
            Assert.AreEqual(1, response.Keywords.Count);

            foreach (var entry in response.Keywords)
            {
                Assert.AreEqual(10, entry.Value.Count);
            }
        }

        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Test, Order(60)]
        public void DeleteJobTest()
        {
            var response = instance.DeleteJob(jobid);

            Assert.IsInstanceOf<Job>(response, "response is Job");
            Assert.NotNull(response);
            Assert.AreEqual(Job.StateEnum.DELETED, response.State);
        }
    }

}
